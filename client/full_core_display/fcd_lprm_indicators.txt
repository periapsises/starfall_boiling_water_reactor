--@client

local FullCoreDisplay = BWR.FullCoreDisplay
local IndicatorType = FullCoreDisplay.IndicatorType
local MeshHandle, MeshHandler = BWR.MeshHandle, BWR.MeshHandler

local LPRMIndicators = {}
BWR.FullCoreDisplay.LPRMIndicators = LPRMIndicators

---@type MeshHandle[]
local lprmMeshHandles = {}

---@class LPRMIndicatorPositioning
---@field x number
---@field y number
---@field xOffset number
---@field yOffset number

---@type LPRMIndicatorPositioning[]
local lprmIndicatorPositioning = {
    [IndicatorType.LPRM_A_DOWN] = { x = 0, y = 0, xOffset = 0, yOffset = 0 },
    [IndicatorType.LPRM_B_DOWN] = { x = 0, y = 1, xOffset = 0, yOffset = 0 },
    [IndicatorType.LPRM_C_DOWN] = { x = 0, y = 2, xOffset = 0, yOffset = 1 },
    [IndicatorType.LPRM_D_DOWN] = { x = 0, y = 3, xOffset = 0, yOffset = 1 },
    [IndicatorType.LPRM_A_UP] = { x = 1, y = 0, xOffset = 1, yOffset = 0 },
    [IndicatorType.LPRM_B_UP] = { x = 1, y = 1, xOffset = 1, yOffset = 0 },
    [IndicatorType.LPRM_C_UP] = { x = 1, y = 2, xOffset = 1, yOffset = 1 },
    [IndicatorType.LPRM_D_UP] = { x = 1, y = 3, xOffset = 1, yOffset = 1 }
}

local meshHandleMatrix = chip():getMatrix()
meshHandleMatrix:translate( Vector( 0, -0.85, 89.9 ) )
meshHandleMatrix:rotate( Angle( 0, 0, 270 ) )

--- Adds four vertices to the current group of vertices.
---@param v1 Vertex3D
---@param v2 Vertex3D
---@param v3 Vertex3D
---@param v4 Vertex3D
---@return Vertex3D[] # The group of vertices the vertices were added to.
local function addVertices( v1, v2, v3, v4 )
    local currentMeshHandle = lprmMeshHandles[#lprmMeshHandles]
    if not currentMeshHandle or #currentMeshHandle.vertices >= FullCoreDisplay.MAX_VERTICES_PER_LPRM_GROUP then
        currentMeshHandle = MeshHandle.new( {}, nil, meshHandleMatrix )
        table.insert( lprmMeshHandles, currentMeshHandle )
        MeshHandler.register( currentMeshHandle )
    end

    table.insert( currentMeshHandle.vertices, v1 )
    table.insert( currentMeshHandle.vertices, v2 )
    table.insert( currentMeshHandle.vertices, v3 )
    table.insert( currentMeshHandle.vertices, v3 )
    table.insert( currentMeshHandle.vertices, v4 )
    table.insert( currentMeshHandle.vertices, v1 )

    return currentMeshHandle
end

local INDICATOR_WIDTH = FullCoreDisplay.INDICATOR_WIDTH
local INDICATOR_HEIGHT = FullCoreDisplay.INDICATOR_HEIGHT
local INDICATOR_SPACING = FullCoreDisplay.INDICATOR_SPACING

---@param vert1 Vertex3D
---@param vert2 Vertex3D
---@param vert3 Vertex3D
---@param vert4 Vertex3D
---@param positioning LPRMIndicatorPositioning
local function setupIndicatorVertexPositions( vert1, vert2, vert3, vert4, positioning, xOffset, yOffset )
    local xOrigin = FullCoreDisplay.MeshXOffset + xOffset + positioning.x * INDICATOR_WIDTH + positioning.xOffset * INDICATOR_SPACING
    local yOrigin = FullCoreDisplay.MeshYOffset - yOffset + positioning.y * INDICATOR_HEIGHT + positioning.yOffset * INDICATOR_SPACING

    vert1.pos = Vector( xOrigin, yOrigin, 0 )
    vert2.pos = Vector( xOrigin + INDICATOR_WIDTH, yOrigin, 0 )
    vert3.pos = Vector( xOrigin + INDICATOR_WIDTH, yOrigin + INDICATOR_HEIGHT, 0 )
    vert4.pos = Vector( xOrigin, yOrigin + INDICATOR_HEIGHT, 0 )
end

--- Represents the diferent indicators for an LPRM group.
---@class LPRMIndicators
---@field position LPRMGroupPosition
---@field indicators table<IndicatorType, Indicator>

---@type LPRMIndicators[]
local allLPRMGroupIndicators = {}

for _, lprmGroupPosition in ipairs( BWR.LPRMGroupPosition.byId ) do
    local lprmGroupIndicators = {}
    lprmGroupIndicators.position = lprmGroupPosition
    lprmGroupIndicators.indicators = {}

    local indicatorsOffsetX = ( lprmGroupPosition.column - 2 ) * ( INDICATOR_WIDTH + INDICATOR_SPACING ) * 0.5 + ( INDICATOR_WIDTH + INDICATOR_SPACING )
    local indicatorsOffsetY = ( lprmGroupPosition.row - 3 ) * ( INDICATOR_WIDTH + INDICATOR_SPACING ) * 0.5 + ( INDICATOR_WIDTH + INDICATOR_SPACING )

    for indicatorType = 7, 14 do
        local vertex1 = {}
        local vertex2 = {}
        local vertex3 = {}
        local vertex4 = {}

        setupIndicatorVertexPositions( vertex1, vertex2, vertex3, vertex4, lprmIndicatorPositioning[indicatorType], indicatorsOffsetX, indicatorsOffsetY )
        local meshHandle = addVertices( vertex1, vertex2, vertex3, vertex4 )

        local indicator = {}
        indicator.vertices = { vertex1, vertex2, vertex3, vertex4 }
        indicator.handle = meshHandle
        indicator.type = indicatorType

        lprmGroupIndicators.indicators[indicatorType] = indicator
    end

    table.insert( allLPRMGroupIndicators, lprmGroupIndicators )
end

local function populateIndicatorUVs( textureMap )
    local otherIndicatorUVs = textureMap.OtherIndicatorUVs

    for _, lprmGroupIndicators in ipairs( allLPRMGroupIndicators ) do
        for indicatorType = 7, 14 do
            local indicator = lprmGroupIndicators.indicators[indicatorType]
            indicator.activeUV = otherIndicatorUVs[indicatorType][true]
            indicator.inactiveUV = otherIndicatorUVs[indicatorType][false]
            FullCoreDisplay.setIndicatorActive( indicator, indicatorType < 11 )
        end
    end

    for _, meshHandle in ipairs( lprmMeshHandles ) do
        meshHandle.material = textureMap.Material
    end
end

hook.add( "FullCoreDisplayMaterialInitialized", "PopulateLPRMIndicatorUVs", populateIndicatorUVs )
