--@name Async Lib
--@author Periapsis
--@shared

local callable = {}
function callable:__call( ... )
    return self:call( ... )
end

local max, qAvg, qUse, qMax = math.max, cpuAverage, cpuUsed, cpuMax()
yield = coroutine.yield

local threadCount = 0
local avgThreadMaxCpu = 0

--- quota( percent )
-- Yields from the current coroutine if the currently used quota exceeds a specific percentage of the max quota
-- @param percent: A value between 0 and 1, 1 being 100% of the max quota
function quota( percent )
    if max( qUse(), qAvg() ) >= qMax * percent then return yield() end
end

--- async( function )
-- Converts a function to be an async thread
-- @param function: The function to convert
-- @param hookName: The hook to use to continue execution (Defaults to 'tick')
function async( func, hookName )
    local thread = {}

    thread.func = func

    function thread:call( ... )
        local runtime = {}

        local routine = coroutine.create( self.func )
        local args = {...}

        runtime.thread = self
        runtime.exec = routine
        runtime.name = "Thread_" .. tostring( routine ):sub( 10 )

        local values
        hookName = hookName or "Tick"

        hook.add( hookName, runtime.name, function()
            if coroutine.status( routine ) ~= "dead" then
                values = {coroutine.resume( routine, unpack( args ) )}
                return
            end

            runtime.values = values

            hook.remove( hookName, runtime.name )
        end )

        return runtime
    end

    return setmetatable( thread, callable )
end

--- await( thread )
-- Awaits for a thread to finish
-- @param function: The thread to wait for
function await( thread )
    while not thread.values do yield() end

    return unpack( thread.values )
end

--- delay( time )
-- Delays an async function for 'time' ms
-- @param time: The time in milliseconds to delay for
function delay( time )
    coroutine.wait( time * 0.001 )
end

------------------------------------------------------------
-- Utilities

local function httpGetAsync( url, headers )
    while not http.canRequest() do yield() end
    
    local waiting = true
    local response

    local function onSuccess( body, length, headers, code )
        response = {
            content = body,
            length = length,
            headers = headers,
            code = code
        }

        waiting = false
    end

    local function onFail( reason )
        response = {
            content = reason,
            length = string.len( reason ),
            headers = {},
            code = 400
        }

        waiting = false
    end

    http.get( url, onSuccess, onFail, headers )
    while waiting do yield() end

    return response
end

--- http.getAsync( url, [headers] )
-- Http GET request that runs asynchroneously
-- @param url: The url to send the request to
-- @param optional headers: Optional list of headers to send
http.getAsync = async( httpGetAsync )

local function httpPostAsync( url, payload, headers )
    while not http.canRequest() do yield() end
    
    local waiting = true
    local response

    local function onSuccess( body, length, headers, code )
        response = {
            content = body,
            length = length,
            headers = headers,
            code = code
        }

        waiting = false
    end

    local function onFail( reason )
        response = {
            content = reason,
            length = string.len( reason ),
            headers = {},
            code = 400
        }

        waiting = false
    end

    http.post( url, payload, onSuccess, onFail, headers )
    while waiting do yield() end

    return response
end

--- http.postAsync( url, payload, [headers] )
-- Http POST request that runs asynchroneously
-- @param url: The url to send the request to
-- @param payload: The payload to send
-- @param optional headers: Optional list of headers to send
http.postAsync = async( httpPostAsync )

local function hookAsync( hookName )
    local waiting = true
    local values

    local function callback( ... )
        waiting = false
        values = {...}
    end

    hook.add( hookName, "AsyncHook_" .. tostring( callback ), callback )
    while waiting do yield() end

    return unpack( values )
end

--- hook.async( hookName )
-- Returns the values passed to the hook
-- @param hookName: The hook to get values from
hook.async = async( hookAsync )

if SERVER then
    local function propCreateAsync( position, angles, model, frozen )
        while not prop.canSpawn() do yield() end
        return prop.create( position, angles, model, frozen )
    end
    
    prop.createAsync = async( propCreateAsync )
end

return async, await, quota, delay
