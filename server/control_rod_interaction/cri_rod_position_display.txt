--@server

local function lVec( vec ) return chip():localToWorld( vec ) end
local function lAng( ang ) return chip():localToWorldAngles( ang ) end

local brightOrangeColor = Color( 255, 192, 64, 255 )
local orangeColor = Color( 255, 128, 0, 255 )
local darkOrangeColor = Color( 64, 32, 0, 255 )

local numericScale = Vector( 0.1, 0.01, 0.1 )

local numericDefaultModel = "models/sprops/misc/alphanum/alphanum_0.mdl"
local numericModelFormat = "models/sprops/misc/alphanum/alphanum_%d.mdl"
local numericDashModel = "models/sprops/misc/alphanum/alphanum_min.mdl"

local numericDisplays = {}

local function setText( self, text )
    if type( text ) == "number" then
        text = string.format( "%02d", text )
    end

    if text == self.currentText then return end
    self.currentText = text

    if text == "  " then
        self.left:setNoDraw( true )
        self.right:setNoDraw( true )
        self.currentHidden = true
        return
    elseif self.currentHidden then
        self.left:setNoDraw( false )
        self.right:setNoDraw( false )
        self.currentHidden = false
    end

    if text[1] == "1" and self.leftOffset == 0 then
        self.leftOffset = -0.29
        self.left:setLocalPos( Vector( self.leftOffset, 0.05, 0 ) )
    end

    if text[1] ~= "1" and self.leftOffset == -0.29 then
        self.leftOffset = 0
        self.left:setLocalPos( Vector( self.leftOffset, 0.05, 0 ) )
    end

    if text[2] == "1" and self.rightOffset == 0 then
        self.rightOffset = -0.29
        self.right:setLocalPos( Vector( self.rightOffset, 0.05, 0 ) )
    end

    if text[2] ~= "1" and self.rightOffset == -0.29 then
        self.rightOffset = 0
        self.right:setLocalPos( Vector( self.rightOffset, 0.05, 0 ) )
    end

    if text == "--" then
        self.left:setModel( numericDashModel )
        self.right:setModel( numericDashModel )
        return
    end

    self.left:setModel( numericModelFormat:format( text[1] ) )
    self.right:setModel( numericModelFormat:format( text[2] ) )
end

local function setSelected( self, selected )
    if self.currentSelected == selected then return end

    if selected then
        self.left:setColor( brightOrangeColor )
        self.right:setColor( brightOrangeColor )
        self.currentSelected = true

        for _, numericDisplay in pairs( numericDisplays ) do
            if numericDisplay ~= self then
                numericDisplay:setSelected( false )
            end
        end
    else
        self.left:setColor( orangeColor )
        self.right:setColor( orangeColor )
        self.currentSelected = false
    end
end

local function initializeControlRodPositionDisplay()
    for _, controlRodPositionDisplay in pairs( BWR.Json.Data.empty_data.FourRodDisplay ) do
        local location = BWR.Json.Vector( controlRodPositionDisplay.location ) + Vector( 0, 0, 40 )
        local angle = BWR.Json.Angle( controlRodPositionDisplay.rotation ) + Angle( 0, 180, 0 )

        local leftNumericPosition = location + angle:getForward() * 0.5 + angle:getRight() * -0.05
        local rightNumericPosition = location + angle:getForward() * -0.5 + angle:getRight() * -0.05

        local leftNumericBackground = hologram.create( lVec( leftNumericPosition ), lAng( angle ), numericDefaultModel, numericScale )
        leftNumericBackground:setColor( darkOrangeColor )
        leftNumericBackground:suppressEngineLighting( true )
        leftNumericBackground:setMaterial( "models/debug/debugwhite" )
        leftNumericBackground:setBodygroup( 0, 3 )
        leftNumericBackground:setParent( chip() )

        local rightNumericBackground = hologram.create( lVec( rightNumericPosition ), lAng( angle ), numericDefaultModel, numericScale )
        rightNumericBackground:setColor( darkOrangeColor )
        rightNumericBackground:suppressEngineLighting( true )
        rightNumericBackground:setMaterial( "models/debug/debugwhite" )
        rightNumericBackground:setBodygroup( 0, 3 )
        rightNumericBackground:setParent( chip() )

        local leftNumericForegroundPosition = leftNumericPosition + angle:getRight() * -0.05
        local leftNumericForeground = hologram.create( lVec( leftNumericForegroundPosition ), lAng( angle ), numericDefaultModel, numericScale )
        leftNumericForeground:setColor( orangeColor )
        leftNumericForeground:suppressEngineLighting( true )
        leftNumericForeground:setMaterial( "models/debug/debugwhite" )
        leftNumericForeground:setBodygroup( 0, 3 )
        leftNumericForeground:setParent( leftNumericBackground )

        local rightNumericForegroundPosition = rightNumericPosition + angle:getRight() * -0.05
        local rightNumericForeground = hologram.create( lVec( rightNumericForegroundPosition ), lAng( angle ), numericDefaultModel, numericScale )
        rightNumericForeground:setColor( orangeColor )
        rightNumericForeground:suppressEngineLighting( true )
        rightNumericForeground:setMaterial( "models/debug/debugwhite" )
        rightNumericForeground:setBodygroup( 0, 3 )
        rightNumericForeground:setParent( rightNumericBackground )

        table.insert( numericDisplays, {
            left = leftNumericForeground,
            right = rightNumericForeground,
            setText = setText,
            setSelected = setSelected,
            currentText = "00",
            currentSelected = false,
            currentHidden = false,
            leftOffset = 0,
            rightOffset = 0
        } )
    end
end

hook.add( "JsonDataReceived", "InitializeControlRodPositionDisplay", initializeControlRodPositionDisplay )
